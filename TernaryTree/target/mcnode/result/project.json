{"categories":[{"name":"branch"},{"name":"line"},{"name":"condition"},{"name":"prime_path"}],"nodes":[{"name":"net.mooctest.TernaryNode.java.getMiddleChild ()LTernaryNode; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$48 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.hasRightChild ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.isLeaf ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s7e10 isEmpty ()Z public LinkedStack.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$41 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e4 getMiddleChild ()LTernaryNode; public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e11 hasNext ()Z public TernaryTree$LevelOrderIterator.java condition true","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s51e58 getNumberOfNodes ()I public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e8 getLevelOrderIterator ()LIterator; public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s11e11 hasLeftChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s0e4 getLeftChild ()LTernaryNode; public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s36e42 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.getLevelOrderIterator ()LIterator; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s12e15 hasNext ()Z public TernaryTree$LevelOrderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"branch"},{"name":"s0e11 hasNext ()Z public TernaryTree$PostorderIterator.java condition false","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$35 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$22 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s36e42 getNumberOfNodes ()I public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s7e10 isEmpty ()Z public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s48e54 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$60 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e10 clear ()V public LinkedQueue.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"s14e20 isLeaf ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$4 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$61 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s37e47 copy ()LTernaryNode; public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e6 hasRightChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s79e86 iterativePreorderTraverse ()V public TernaryTree.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s23e23 hasNext ()Z public TernaryTree$PostorderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$4 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$16 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedQueue.java.clear ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.getInorderIterator ()LIterator; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s12e15 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$LevelOrderIterator.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$5 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.getNumberOfNodes ()I public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree$LevelOrderIterator.java.hasNext ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$15 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$3 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s66e67 copy ()LTernaryNode; public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s30e36 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s16e16 hasNext ()Z public TernaryTree$PreorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PreorderIterator.java","category":"line"},{"name":"s0e5 setRightChild (LTernaryNode;)V public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.isEmpty ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.isLeaf ()Z public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$55 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s30e36 copy ()LTernaryNode; public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s0e5 getHeight (LTernaryNode;)I private TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$21 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s7e10 hasMiddleChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s12e12 hasRightChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e12 getNumberOfNodes ()I public TernaryNode.java line","weight":6,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s15e24 iterativePreorderTraverse ()V public TernaryTree.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.hasRightChild ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"net.mooctest.TernaryNode.java.isLeaf ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s17e17 hasNext ()Z public TernaryTree$PreorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PreorderIterator.java","category":"line"},{"name":"net.mooctest.TernaryTree$PostorderIterator.java.hasNext ()Z public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$53 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree$PostorderIterator.java.remove ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"prime_path"},{"name":"s55e65 copy ()LTernaryNode; public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s16e16 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$LevelOrderIterator.java","category":"line"},{"name":"s16e16 hasNext ()Z public TernaryTree$PreorderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"branch"},{"name":"s7e13 isLeaf ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java line","weight":8,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$10 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getHeight (LTernaryNode;)I private$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e5 getHeight ()I public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e4 getRightChild ()LTernaryNode; public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s12e15 hasNext ()Z public TernaryTree$PreorderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"branch"},{"name":"s0e7 remove ()V public TernaryTree$PreorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PreorderIterator.java","category":"line"},{"name":"s0e6 isEmpty ()Z public LinkedQueue.java condition true","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"condition"},{"name":"s0e6 isEmpty ()Z public LinkedStack.java condition false","weight":1,"location":"net.mooctest.LinkedStack.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.setLeftChild (LTernaryNode;)V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s21e27 getNumberOfNodes ()I public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.getRootNode ()LTernaryNode; protected$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedQueue$Node.java.setNextNode (LNode;)V private$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedQueue$Node.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$28 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.hasLeftChild ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s50e51 getHeight (LTernaryNode;)I private TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e5 setRootNode (LTernaryNode;)V protected TernaryTree.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s0e7 remove ()V public TernaryTree$LevelOrderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$LevelOrderIterator.java","category":"line"},{"name":"s6e49 getHeight (LTernaryNode;)I private TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s37e47 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$20 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.getPostorderIterator ()LIterator; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree$LevelOrderIterator.java.hasNext ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.isEmpty ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$27 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s7e10 hasLeftChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s0e6 hasRightChild ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s0e5 clear ()V public LinkedStack.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java condition false","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"condition"},{"name":"s129e129 iterativePreorderTraverse ()V public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.LinkedQueue.java.isEmpty ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$56 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s11e11 isEmpty ()Z public LinkedStack.java branch","weight":1,"location":"net.mooctest.LinkedStack.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$17 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$3 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$9 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e11 hasNext ()Z public TernaryTree$PreorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PreorderIterator.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$52 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$59 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e14 iterativePreorderTraverse ()V public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s48e54 copy ()LTernaryNode; public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s98e128 iterativePreorderTraverse ()V public TernaryTree.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$23 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$49 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s21e27 getNumberOfNodes ()I public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s0e8 getPreorderIterator ()LIterator; public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s0e6 hasMiddleChild ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s129e129 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s0e6 hasMiddleChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s30e36 copy ()LTernaryNode; public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s7e10 hasLeftChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s11e11 hasRightChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$42 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$24 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$34 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$63 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s19e22 hasNext ()Z public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"s7e13 isEmpty ()Z public LinkedQueue.java condition false","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$7 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s12e12 isEmpty ()Z public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$6 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e6 hasLeftChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e5 <init> (LString;)V public EmptyQueueException.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\EmptyQueueException.java","category":"line"},{"name":"s18e18 isEmpty ()Z public LinkedQueue.java branch","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"branch"},{"name":"s0e6 isEmpty ()Z public LinkedStack.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"s7e13 isEmpty ()Z public LinkedQueue.java condition true","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"condition"},{"name":"s48e54 copy ()LTernaryNode; public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s12e12 hasLeftChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s14e20 isLeaf ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$13 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s21e24 isLeaf ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s6e49 getHeight (LTernaryNode;)I private TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s0e6 hasLeftChild ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$31 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s66e73 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$45 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e18 copy ()LTernaryNode; public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s7e10 hasRightChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s11e11 hasRightChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e11 hasNext ()Z public TernaryTree$PostorderIterator.java condition true","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"condition"},{"name":"s0e11 hasNext ()Z public TernaryTree$LevelOrderIterator.java condition false","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"condition"},{"name":"net.mooctest.TernaryTree$PreorderIterator.java.hasNext ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.isLeaf ()Z public$PrimePath$3 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s25e25 isLeaf ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryNode.java.getRightChild ()LTernaryNode; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getHeight (LTernaryNode;)I private$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s21e27 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s21e24 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e6 isEmpty ()Z public LinkedStack.java condition true","weight":1,"location":"net.mooctest.LinkedStack.java","category":"condition"},{"name":"s11e11 isEmpty ()Z public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s0e5 getHeight (LTernaryNode;)I private TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s36e42 getNumberOfNodes ()I public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.hasMiddleChild ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s13e20 getNumberOfNodes ()I public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e8 getPostorderIterator ()LIterator; public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$12 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedStack$Node.java.getNextNode ()LNode; private$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedStack$Node.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$25 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e11 hasNext ()Z public TernaryTree$PreorderIterator.java condition false","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.getPreorderIterator ()LIterator; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s7e10 hasRightChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.EmptyTreeException.java.<init> (LString;)V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.EmptyTreeException.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$5 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$38 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s55e65 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s24e24 hasNext ()Z public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$58 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e14 iterativePreorderTraverse ()V public TernaryTree.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s91e97 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$32 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e4 getNextNode ()LNode; private LinkedQueue$Node.java line","weight":1,"location":"net\\mooctest\\LinkedQueue$Node.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$51 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e5 setNextNode (LNode;)V private LinkedStack$Node.java line","weight":2,"location":"net\\mooctest\\LinkedStack$Node.java","category":"line"},{"name":"s50e51 getHeight (LTernaryNode;)I private TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s21e27 getNumberOfNodes ()I public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s0e5 setNextNode (LNode;)V private LinkedQueue$Node.java line","weight":2,"location":"net\\mooctest\\LinkedQueue$Node.java","category":"line"},{"name":"s0e5 <init> ()V public EmptyQueueException.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\EmptyQueueException.java","category":"line"},{"name":"net.mooctest.TernaryTree$PostorderIterator.java.hasNext ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree$PreorderIterator.java.remove ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"prime_path"},{"name":"s0e4 getNextNode ()LNode; private LinkedStack$Node.java line","weight":1,"location":"net\\mooctest\\LinkedStack$Node.java","category":"line"},{"name":"s0e6 isEmpty ()Z public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryTree$LevelOrderIterator.java.remove ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"prime_path"},{"name":"s16e16 hasNext ()Z public TernaryTree$LevelOrderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$LevelOrderIterator.java","category":"branch"},{"name":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s23e23 hasNext ()Z public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"s0e18 copy ()LTernaryNode; public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$26 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s43e50 getNumberOfNodes ()I public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e5 <init> (LString;)V public EmptyTreeException.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\EmptyTreeException.java","category":"line"},{"name":"s0e5 setMiddleChild (LTernaryNode;)V public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$39 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedStack.java.isEmpty ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.LinkedStack.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$6 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryTree$PreorderIterator.java.hasNext ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"prime_path"},{"name":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java condition true","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$50 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e6 isEmpty ()Z public LinkedQueue.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"s7e10 isEmpty ()Z public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$57 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s11e11 hasLeftChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e9 <init> ()V public LinkedStack.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$44 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e7 getInorderIterator ()LIterator; public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$37 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s48e54 copy ()LTernaryNode; public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$4 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s28e35 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s0e5 <init> ()V public EmptyTreeException.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\EmptyTreeException.java","category":"line"},{"name":"s0e9 <init> ()V public TernaryTree.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s0e11 hasNext ()Z public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$30 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.EmptyQueueException.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.EmptyQueueException.java","category":"prime_path"},{"name":"net.mooctest.EmptyTreeException.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.EmptyTreeException.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$46 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedQueue.java.isEmpty ()Z public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$7 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.LinkedStack$Node.java.setNextNode (LNode;)V private$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedStack$Node.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$64 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e14 <init> ()V public LinkedQueue.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java condition true","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$19 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree$PostorderIterator.java.hasNext ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"prime_path"},{"name":"s0e6 isEmpty ()Z public LinkedQueue.java condition false","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"condition"},{"name":"s19e22 hasNext ()Z public TernaryTree$PostorderIterator.java branch","weight":1,"location":"net.mooctest.TernaryTree$PostorderIterator.java","category":"branch"},{"name":"net.mooctest.LinkedQueue$Node.java.getNextNode ()LNode; private$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedQueue$Node.java","category":"prime_path"},{"name":"s14e17 isEmpty ()Z public LinkedQueue.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"s19e29 copy ()LTernaryNode; public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e14 iterativePreorderTraverse ()V public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$6 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e6 isLeaf ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$7 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e5 clear ()V public TernaryTree.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s0e11 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$LevelOrderIterator.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.hasLeftChild ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s51e58 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s0e7 getHeight ()I public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e11 hasNext ()Z public TernaryTree$PreorderIterator.java condition true","weight":1,"location":"net.mooctest.TernaryTree$PreorderIterator.java","category":"condition"},{"name":"net.mooctest.LinkedQueue.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$14 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$43 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$62 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$5 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e12 getNumberOfNodes ()I public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.LinkedStack.java.clear ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedStack.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.setRightChild (LTernaryNode;)V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e4 getRootNode ()LTernaryNode; protected TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.setRootNode (LTernaryNode;)V protected$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s36e42 getNumberOfNodes ()I public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s25e25 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s13e20 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"net.mooctest.TernaryNode.java.getHeight ()I public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s19e19 isEmpty ()Z public LinkedQueue.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"net.mooctest.EmptyQueueException.java.<init> (LString;)V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.EmptyQueueException.java","category":"prime_path"},{"name":"s0e7 getNumberOfNodes ()I public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.LinkedStack.java.<init> ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedStack.java","category":"prime_path"},{"name":"s12e12 hasMiddleChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s91e97 iterativePreorderTraverse ()V public TernaryTree.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s30e36 copy ()LTernaryNode; public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s7e13 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e6 isLeaf ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s0e6 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e6 hasMiddleChild ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s12e15 hasNext ()Z public TernaryTree$PreorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PreorderIterator.java","category":"line"},{"name":"s79e86 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s0e6 isEmpty ()Z public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"s66e73 iterativePreorderTraverse ()V public TernaryTree.java line","weight":3,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"s15e24 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s11e11 hasMiddleChild ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e5 getHeight (LTernaryNode;)I private TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$33 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s14e20 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s0e6 isEmpty ()Z public TernaryTree.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryTree.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.getHeight ()I public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s0e7 remove ()V public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"s0e18 copy ()LTernaryNode; public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.LinkedQueue.java.isEmpty ()Z public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$47 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e5 setLeftChild (LTernaryNode;)V public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s43e50 getNumberOfNodes ()I public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s7e13 isLeaf ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$18 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s11e11 isEmpty ()Z public LinkedStack.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"s11e11 hasMiddleChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s17e17 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$LevelOrderIterator.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.copy ()LTernaryNode; public$PrimePath$2 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s7e10 isEmpty ()Z public LinkedStack.java branch","weight":1,"location":"net.mooctest.LinkedStack.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$65 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e5 <init> ()V public TernaryNode.java line","weight":2,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$1 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s11e11 isEmpty ()Z public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$40 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$29 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s14e17 isEmpty ()Z public LinkedQueue.java branch","weight":1,"location":"net.mooctest.LinkedQueue.java","category":"branch"},{"name":"s26e26 isLeaf ()Z public TernaryNode.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.clear ()V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s0e6 hasRightChild ()Z public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"s66e67 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s7e13 isEmpty ()Z public LinkedQueue.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$8 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$36 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.getLeftChild ()LTernaryNode; public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s28e35 getNumberOfNodes ()I public TernaryNode.java line","weight":4,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\TernaryNode.java","category":"line"},{"name":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java condition false","weight":1,"location":"net.mooctest.TernaryTree.java","category":"condition"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$11 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"net.mooctest.TernaryTree.java.iterativePreorderTraverse ()V public$PrimePath$54 prime_path","weight":1,"location":"net.mooctest.TernaryTree.java","category":"prime_path"},{"name":"s7e10 hasMiddleChild ()Z public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s98e128 iterativePreorderTraverse ()V public TernaryTree.java branch","weight":1,"location":"net.mooctest.TernaryTree.java","category":"branch"},{"name":"s19e29 copy ()LTernaryNode; public TernaryNode.java branch","weight":1,"location":"net.mooctest.TernaryNode.java","category":"branch"},{"name":"s18e18 isEmpty ()Z public LinkedQueue.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedQueue.java","category":"line"},{"name":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java line","weight":1,"location":"net\\mooctest\\TernaryTree$PostorderIterator.java","category":"line"},{"name":"s0e12 getNumberOfNodes ()I public TernaryNode.java condition false","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"},{"name":"net.mooctest.TernaryNode.java.setMiddleChild (LTernaryNode;)V public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s12e12 isEmpty ()Z public LinkedStack.java line","weight":1,"location":"C:\\mooctest\\projects\\3816\\35135\\TernaryTree\\src\\main\\java\\net\\mooctest\\LinkedStack.java","category":"line"},{"name":"net.mooctest.TernaryNode.java.getNumberOfNodes ()I public$PrimePath$3 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"net.mooctest.LinkedStack.java.isEmpty ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.LinkedStack.java","category":"prime_path"},{"name":"net.mooctest.TernaryNode.java.hasMiddleChild ()Z public$PrimePath$0 prime_path","weight":1,"location":"net.mooctest.TernaryNode.java","category":"prime_path"},{"name":"s0e6 hasLeftChild ()Z public TernaryNode.java condition true","weight":1,"location":"net.mooctest.TernaryNode.java","category":"condition"}],"edges":[{"source":"s0e11 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"false"},{"source":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s19e22 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"false"},{"source":"s13e20 getNumberOfNodes ()I public TernaryNode.java line","target":"s21e27 getNumberOfNodes ()I public TernaryNode.java line","value":"serial"},{"source":"s7e13 isLeaf ()Z public TernaryNode.java line","target":"s14e20 isLeaf ()Z public TernaryNode.java line","value":"false"},{"source":"s16e16 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","target":"s17e17 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","value":"serial"},{"source":"s7e13 isEmpty ()Z public LinkedQueue.java line","target":"s14e17 isEmpty ()Z public LinkedQueue.java line","value":"false"},{"source":"s48e54 copy ()LTernaryNode; public TernaryNode.java line","target":"s66e67 copy ()LTernaryNode; public TernaryNode.java line","value":"true"},{"source":"s7e10 hasRightChild ()Z public TernaryNode.java line","target":"s12e12 hasRightChild ()Z public TernaryNode.java line","value":"goto"},{"source":"s0e6 isEmpty ()Z public LinkedQueue.java line","target":"s18e18 isEmpty ()Z public LinkedQueue.java line","value":"true"},{"source":"s79e86 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java line","value":"serial"},{"source":"s6e49 getHeight (LTernaryNode;)I private TernaryNode.java line","target":"s50e51 getHeight (LTernaryNode;)I private TernaryNode.java line","value":"serial"},{"source":"s0e6 isEmpty ()Z public LinkedStack.java line","target":"s11e11 isEmpty ()Z public LinkedStack.java line","value":"true"},{"source":"s36e42 getNumberOfNodes ()I public TernaryNode.java line","target":"s51e58 getNumberOfNodes ()I public TernaryNode.java line","value":"true"},{"source":"s19e22 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s24e24 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"goto"},{"source":"s7e13 isEmpty ()Z public LinkedQueue.java line","target":"s18e18 isEmpty ()Z public LinkedQueue.java line","value":"true"},{"source":"s19e29 copy ()LTernaryNode; public TernaryNode.java line","target":"s30e36 copy ()LTernaryNode; public TernaryNode.java line","value":"serial"},{"source":"s0e5 getHeight (LTernaryNode;)I private TernaryNode.java line","target":"s6e49 getHeight (LTernaryNode;)I private TernaryNode.java line","value":"false"},{"source":"s11e11 isEmpty ()Z public LinkedStack.java line","target":"s12e12 isEmpty ()Z public LinkedStack.java line","value":"serial"},{"source":"s0e5 getHeight (LTernaryNode;)I private TernaryNode.java line","target":"s50e51 getHeight (LTernaryNode;)I private TernaryNode.java line","value":"true"},{"source":"s7e10 isEmpty ()Z public LinkedStack.java line","target":"s12e12 isEmpty ()Z public LinkedStack.java line","value":"goto"},{"source":"s0e11 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","target":"s12e15 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","value":"false"},{"source":"s15e24 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","value":"serial"},{"source":"s66e73 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java line","value":"serial"},{"source":"s0e6 isEmpty ()Z public LinkedQueue.java line","target":"s7e13 isEmpty ()Z public LinkedQueue.java line","value":"false"},{"source":"s14e20 isLeaf ()Z public TernaryNode.java line","target":"s21e24 isLeaf ()Z public TernaryNode.java line","value":"false"},{"source":"s12e18 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s23e23 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"true"},{"source":"s7e13 isLeaf ()Z public TernaryNode.java line","target":"s25e25 isLeaf ()Z public TernaryNode.java line","value":"true"},{"source":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java line","value":"false"},{"source":"s16e16 hasNext ()Z public TernaryTree$PreorderIterator.java line","target":"s17e17 hasNext ()Z public TernaryTree$PreorderIterator.java line","value":"serial"},{"source":"s12e15 hasNext ()Z public TernaryTree$PreorderIterator.java line","target":"s17e17 hasNext ()Z public TernaryTree$PreorderIterator.java line","value":"goto"},{"source":"s14e20 isLeaf ()Z public TernaryNode.java line","target":"s25e25 isLeaf ()Z public TernaryNode.java line","value":"true"},{"source":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java line","value":"true"},{"source":"s0e6 isEmpty ()Z public TernaryTree.java line","target":"s11e11 isEmpty ()Z public TernaryTree.java line","value":"true"},{"source":"s0e6 hasMiddleChild ()Z public TernaryNode.java line","target":"s7e10 hasMiddleChild ()Z public TernaryNode.java line","value":"false"},{"source":"s28e35 getNumberOfNodes ()I public TernaryNode.java line","target":"s36e42 getNumberOfNodes ()I public TernaryNode.java line","value":"serial"},{"source":"s7e10 hasLeftChild ()Z public TernaryNode.java line","target":"s12e12 hasLeftChild ()Z public TernaryNode.java line","value":"goto"},{"source":"s21e27 getNumberOfNodes ()I public TernaryNode.java line","target":"s28e35 getNumberOfNodes ()I public TernaryNode.java line","value":"false"},{"source":"s0e6 isLeaf ()Z public TernaryNode.java line","target":"s25e25 isLeaf ()Z public TernaryNode.java line","value":"true"},{"source":"s23e23 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s24e24 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"serial"},{"source":"s21e27 getNumberOfNodes ()I public TernaryNode.java line","target":"s36e42 getNumberOfNodes ()I public TernaryNode.java line","value":"true"},{"source":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s91e97 iterativePreorderTraverse ()V public TernaryTree.java line","value":"false"},{"source":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java line","value":"true"},{"source":"s36e42 getNumberOfNodes ()I public TernaryNode.java line","target":"s43e50 getNumberOfNodes ()I public TernaryNode.java line","value":"false"},{"source":"s0e14 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","value":"true"},{"source":"s48e54 copy ()LTernaryNode; public TernaryNode.java line","target":"s55e65 copy ()LTernaryNode; public TernaryNode.java line","value":"false"},{"source":"s55e65 copy ()LTernaryNode; public TernaryNode.java line","target":"s66e67 copy ()LTernaryNode; public TernaryNode.java line","value":"serial"},{"source":"s11e11 hasLeftChild ()Z public TernaryNode.java line","target":"s12e12 hasLeftChild ()Z public TernaryNode.java line","value":"serial"},{"source":"s7e10 isEmpty ()Z public TernaryTree.java line","target":"s12e12 isEmpty ()Z public TernaryTree.java line","value":"goto"},{"source":"s43e50 getNumberOfNodes ()I public TernaryNode.java line","target":"s51e58 getNumberOfNodes ()I public TernaryNode.java line","value":"serial"},{"source":"s0e6 hasMiddleChild ()Z public TernaryNode.java line","target":"s11e11 hasMiddleChild ()Z public TernaryNode.java line","value":"true"},{"source":"s11e11 hasRightChild ()Z public TernaryNode.java line","target":"s12e12 hasRightChild ()Z public TernaryNode.java line","value":"serial"},{"source":"s0e18 copy ()LTernaryNode; public TernaryNode.java line","target":"s30e36 copy ()LTernaryNode; public TernaryNode.java line","value":"true"},{"source":"s12e15 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","target":"s17e17 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","value":"goto"},{"source":"s91e97 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s98e128 iterativePreorderTraverse ()V public TernaryTree.java line","value":"serial"},{"source":"s11e11 hasMiddleChild ()Z public TernaryNode.java line","target":"s12e12 hasMiddleChild ()Z public TernaryNode.java line","value":"serial"},{"source":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s129e129 iterativePreorderTraverse ()V public TernaryTree.java line","value":"true"},{"source":"s7e10 hasMiddleChild ()Z public TernaryNode.java line","target":"s12e12 hasMiddleChild ()Z public TernaryNode.java line","value":"goto"},{"source":"s14e17 isEmpty ()Z public LinkedQueue.java line","target":"s19e19 isEmpty ()Z public LinkedQueue.java line","value":"goto"},{"source":"s0e6 hasLeftChild ()Z public TernaryNode.java line","target":"s11e11 hasLeftChild ()Z public TernaryNode.java line","value":"true"},{"source":"s0e14 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s15e24 iterativePreorderTraverse ()V public TernaryTree.java line","value":"false"},{"source":"s0e11 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","target":"s16e16 hasNext ()Z public TernaryTree$LevelOrderIterator.java line","value":"true"},{"source":"s30e36 copy ()LTernaryNode; public TernaryNode.java line","target":"s48e54 copy ()LTernaryNode; public TernaryNode.java line","value":"true"},{"source":"s37e47 copy ()LTernaryNode; public TernaryNode.java line","target":"s48e54 copy ()LTernaryNode; public TernaryNode.java line","value":"serial"},{"source":"s0e6 hasLeftChild ()Z public TernaryNode.java line","target":"s7e10 hasLeftChild ()Z public TernaryNode.java line","value":"false"},{"source":"s0e12 getNumberOfNodes ()I public TernaryNode.java line","target":"s21e27 getNumberOfNodes ()I public TernaryNode.java line","value":"true"},{"source":"s0e11 hasNext ()Z public TernaryTree$PreorderIterator.java line","target":"s16e16 hasNext ()Z public TernaryTree$PreorderIterator.java line","value":"true"},{"source":"s0e11 hasNext ()Z public TernaryTree$PostorderIterator.java line","target":"s19e22 hasNext ()Z public TernaryTree$PostorderIterator.java line","value":"true"},{"source":"s18e18 isEmpty ()Z public LinkedQueue.java line","target":"s19e19 isEmpty ()Z public LinkedQueue.java line","value":"serial"},{"source":"s25e25 isLeaf ()Z public TernaryNode.java line","target":"s26e26 isLeaf ()Z public TernaryNode.java line","value":"serial"},{"source":"s98e128 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s25e33 iterativePreorderTraverse ()V public TernaryTree.java line","value":"goto"},{"source":"s21e24 isLeaf ()Z public TernaryNode.java line","target":"s26e26 isLeaf ()Z public TernaryNode.java line","value":"goto"},{"source":"s0e6 isEmpty ()Z public LinkedStack.java line","target":"s7e10 isEmpty ()Z public LinkedStack.java line","value":"false"},{"source":"s34e65 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s66e73 iterativePreorderTraverse ()V public TernaryTree.java line","value":"false"},{"source":"s0e6 isLeaf ()Z public TernaryNode.java line","target":"s7e13 isLeaf ()Z public TernaryNode.java line","value":"false"},{"source":"s0e6 isEmpty ()Z public TernaryTree.java line","target":"s7e10 isEmpty ()Z public TernaryTree.java line","value":"false"},{"source":"s0e6 hasRightChild ()Z public TernaryNode.java line","target":"s7e10 hasRightChild ()Z public TernaryNode.java line","value":"false"},{"source":"s0e6 hasRightChild ()Z public TernaryNode.java line","target":"s11e11 hasRightChild ()Z public TernaryNode.java line","value":"true"},{"source":"s30e36 copy ()LTernaryNode; public TernaryNode.java line","target":"s37e47 copy ()LTernaryNode; public TernaryNode.java line","value":"false"},{"source":"s87e90 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s98e128 iterativePreorderTraverse ()V public TernaryTree.java line","value":"true"},{"source":"s74e78 iterativePreorderTraverse ()V public TernaryTree.java line","target":"s79e86 iterativePreorderTraverse ()V public TernaryTree.java line","value":"false"},{"source":"s0e12 getNumberOfNodes ()I public TernaryNode.java line","target":"s13e20 getNumberOfNodes ()I public TernaryNode.java line","value":"false"},{"source":"s0e18 copy ()LTernaryNode; public TernaryNode.java line","target":"s19e29 copy ()LTernaryNode; public TernaryNode.java line","value":"false"},{"source":"s11e11 isEmpty ()Z public TernaryTree.java line","target":"s12e12 isEmpty ()Z public TernaryTree.java line","value":"serial"},{"source":"s0e11 hasNext ()Z public TernaryTree$PreorderIterator.java line","target":"s12e15 hasNext ()Z public TernaryTree$PreorderIterator.java line","value":"false"}]}